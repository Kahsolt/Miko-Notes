# Dockerfile用于Docker镜像的自动化构建
# 每一条对镜像有修改的指令
# 都会产生一次commit即一个新的镜像层

源信息指令
  FROM <image>[:<tag>]
  MAINTAINER <name>

控制指令
  RUN command params..				# 实际执行 /bin/sh command params..
  RUN ["executable", "params"..]	# 如 RUN ["/bin/bash", "-c", "ls"]
  WORKDIR <abs/rel_path>
  ONBUILD	# ???

引入指令
  ADD <src>... <dest>
  ADD ["<src>", ..., "<dest>"]		# 本地文件导入容器，通配符支持*/?/[]
  COPY <src>... <dest>
  COPY ["<src>", ..., "<dest>"]		# 类同ADD，但不访问网络、不自动解压
.dockerignore文件
  置于Dockerfile同层，影响ADD/COPY

执行指令：构建完后的入口执行指令(容器生命周期所绑定的程序)
  CMD command params..
  CMD ["executable", "params"..]
  CMD ["params"..]					# 将参数传给ENTRYPOINT指令
  ENTRYPOINT command, params..
  ENTRYPOINT ["executable", "params"..]
    一般用法：
      COPY init.sh /init.sh		# init.sh执行一系列初始化和启动，以exec "$@"结尾
      RUN chmod +x /init.sh
      ENTRYPOINT ["/init.sh"]

配置指令
  VOLUME <path>			# 挂载本地目录
  EXPOSE <port>..		# 暴露端口
  ENV <key> <value>
  ENV <key>=<value> ...
  LABEL <key>=<value> ...		# 为镜像作注释，用docker inspect可见
  USER <uid|username>			# 影响其后的CMD/RUN/ENTRYPOINT指令
  ARG <name>					# 类同ENV，但只作用于镜像构建期间，且会被ENV的同名变量覆盖
  ARG <name>=<default>			# 用docker build --build-arg <name>=<value>来提供变量值
  STOPSIGNAL <signame|signo>	# docker stop时传递的信号
  SHELL ["executable", "params"..]	# 指定RUN/CMD使用的shell

环境变量
  ENV path /usr/bin
  CMD echo ${path}/zsh

