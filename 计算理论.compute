# 各种花式计算理论

INDEX
0.	确定有穷自动机DFA/不确定有穷自动机NFA
1.	确定下推自动机DPDA
2.	不确定有穷自动机NPDA
3.	确定图灵机DTM/不确定图灵机NTM
	Lambda演算
	SKI组合子演算/Iota演算
	标签系统(Tag System)/循环标签系统
	Conway二维生命游戏/一维元胞自动机110号规则(rule 110)
	Wofram的2,3图灵机(TM23)
	
一.有穷自动机FA
要素：状态、规则、输入、输出
	规则=当前状态+消耗字符+下一状态
不确定性：即在不确定状态上进行转移时使用泛洪思想、最终若当前状态集中存在至少一个接受状态则接受
自由转移/ε转移:NFA状态间无需消耗输入符号即可转移，通常用于“or”语义，即同时尝试两条线路
确定化/NFA转DFA：将特定的一个NFA“状态集合”重命名为一个DFA“状态”；状态可能增加或减少、极端最坏情况下n状态NFA会产生一个2^n状态DFA
DFA最小化/Brzozowski算法：从一个DFA开始，反转所有规则箭头方向，交换所有状态的起始-接受角色，得到一个NFA，将此NFA按常规方法转化为DFA(此DFA保证最小且不含冗余态)，则该最小DFA接受原DFA的反串；再重复该操作一次即可得到等价于原DFA的最小DFA
正则表示：每个FA都可以转换成一个基本正则表达式(仅连接、选择、重复三种运算)

二.下推自动机PDA
要素：栈、有穷自动机
	规则=当前状态+消耗字符+下一状态+是否弹栈+压栈字符
不确定性：NPDA确实比DPDA的计算能力强

三.图灵机TM
要素：纸带、有穷自动机
	规则=当前状态+纸带单元格读写+读写头移动+下一状态
子例程复用问题：由于无法保存返回地址因此例程无法复用，只能在所有需要用的地方都插入一个完整副本
通用图灵机UTM/可编程性：向通用图灵机输入一个目标图灵机、使其模拟而执行目标图灵机

四.Lambda演算
要素：匿名函数、输出、输出
*参考\Documents\Ruby\Lambda.rb

五.SKI组合子演算
S[a][b][c] -> a[c][b[c]]
K[a][b] -> a
I[a] -> a
*纯化改进：Iota演算
i[a] -> a[S][K]
可代换：
  i[i[i[i[i]]]] -> S
  i[i[i[i]]] -> K
  i[i] -> I

六.标签系统
要素：规则(当前状态+添加字符串)、删除数
例如某系统：
  0.若字符串以a开头时，追加字符bc
    若字符串以b开头时，追加字符caad
    若字符串以c开头时，追加字符ccd
  1.删除起首3个字符(删除数)
  2.直到执行0无法追加字符，或执行1时删除数大于当前符串长度，停机
*额外约束简化：循环标签系统
规则要求：
  0.字符串只能包含两个字符：0和1
  1.添加符串的规则被循环地依次选择(而不是靠条件判定)，但只在当前符串首符为1时才应用
  2.删除数总是1
例如某系统：规则有三条，依次为追加1/追加0010/追加10

七.二维生命游戏
要素：状态、规则
  规则：当前方格细胞下一时刻的生死，由当前方格相邻8个邻居当前的生死情况决定
*约束简化：一维一维元胞自动机(其中110号规则时图灵完备的)
110号规则：
  111 -> 0
  110 -> 1
  101 -> 1
  100 -> 0
  011 -> 1
  010 -> 1
  001 -> 1
  000 -> 0
*将01101110写作十进制即110号

八.2,3图灵机(TM23)
命名：两个状态(初始在状态1)、三个字符
共六个规则：
  1 a/b; L; 1
    b/a; L; 1
	_/b; R; 2
  2 a/_; R; 1
    b/a; R; 2
	_/a; L; 1


# 图灵停机问题
丘奇-图灵论题：任何算法都能被一台机器(尤其是确定图灵机)所执行
构建停机悖论：
# TuringHalt.rb
if eval(STDIN.read)== 'no' then
  print 'yes'
else
  print 'no'
end
$ ruby TuringHalt.rb < TuringHalt.rb	# BOOOOOM!

# 自引用代码
# PutsSelf.rb
data = %q{
program = "data = %q{#{data}}" + data
puts program
}
program = "data = %q{#{data}}" + data
puts program