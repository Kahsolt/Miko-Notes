考研复习：计算机组成原理

零.系统组成概览
1.发展历程
计算机时代
  电子管时代：机器语言；延迟线、磁鼓
  晶体管时代：高级语言如Fortran；磁芯存储器；操作系统雏形
  集成电路时代：高级语言；半导体存储器；分时操作系统
  大规模集成电路时代：微处理器，并行、流水线、高速缓存、虚拟存储器
元件时代
  摩尔定律：价格不变时每18个月集成电路上的晶体管数量翻倍
  半导体存储11代：1K/4K/16K/64K/256K/1M/4M/16M/64M/256M/1G(每次x4)
  Intel Core：4004(x4)/8008(x8)/8080/8086(x16)/8088/80186/80286/80386(x32)/80486/Pentium/Pentium pro(x64)/Pentium II/Pentium III/Pentium 4
指令-数据流分类/Flynn分类
  单指单数SISD：传统冯诺依曼体系
  单指多数SIMD：阵列处理器、向量处理器
  多指单数MISD：用于容错系统
  多指多数MIMD：多处理器、多计算机系统

2.层次结构
系统组成
  逻辑等效：软件和硬件都能实现某一功能时称逻辑上等效
硬件组成
  早期冯诺依曼机：存储程序
                    ┌────存储器━━━┓
                    │      ┃      ┃
        ━━>输入设备━━━━━>运算器━━━━━━>输出设备━━>
              │     │      ┃      ┃     │
              └─────┴────控制器<━━┹─────┘
         *数据线(粗),控制反馈线(细);无箭头则双向
    1.五大部件：运算器、存储器、控制器、输入设备、输出设备
    2.指令和数据均以二进制表示、以同等地位存于存储器内，并可寻址
    3.指令=操作码+地址码(操作数地址)，指令顺序存放顺序执行(除非刻意跳转)
    4.以运算器为中心
  现代计算机
                    ┌────运算器
                    │      ┃
        ━━>输入设备━━━━━>存储器━━━━━━>输出设备━━>
              │     │     │ ┃            │
              └─────┴────控制器<────────┘
         *数据线(粗),控制反馈线(细);无箭头则双向
    1.以存储器为中心，IO绕过CPU
  功能部件
    输入设备：键盘/鼠标/扫描仪/摄像头
    输出设备：显示器/打印机
    存储器：主存(CPU能直接访问)；辅存(先调入主存)
         ━━>地址存储器━━━━>存储体━━━━>数据存储器━━━
                ^            ^            ^
                │            │            │
                └───────时序控制逻辑──────┘
      *一个存储单元=N个(存储字长)*存储元件(每个存1bit) => 一个存储字(一般以字节Byte对齐)
      1.地址寄存器MAR：地址译码后的将访问地址，位数与地址空间对应
      2.数据寄存器MDR：暂存读入或写出的数据字，位数与存储字长相等
      3.时序控制逻辑：产生存取的时序周期
    运算器
      核心ALU：运算部件+若干通用寄存器(累加ACC/乘商MQ/操作数X/变址IX/基址BR/状态字PSW)
    控制器
      控制单元CU：决策做什么操作
      程序计数器PC：下一条指令地址，与主存的MAR之间有通路(自动+1)
      指令寄存器IR：存放当前指令，内容来自主存MDR；本指令中的操作码Op(IR)送至CU、Ad(IR)送至MAR
软件分类
  系统软件：基础平台，OS、DBMS、语言处理程序、分布式虚拟化、标准库、服务
  应用软件：解决特定问题，科学计算、工程设计、数据统计
  编程语言：机器语言/二进制->汇编语言->高级语言
工作过程
  取指：PC->MAR->Mem->MDR->IR
  分析：Op(IR)->CU
  执行：Ad(IR)->MAR->Mem->MDR->(X)->ACC
多层次结构
  0.微指令系统		硬件执行的时序逻辑
  1.机器语言机器	微程序解释机器执行
  2.操作系统机器	机器语言解释操作系统
  3.汇编语言机器	汇编程序翻译为机器语言
  4.高级语言机器	编译程序编译为汇编语言

3.性能指标
机器字长	一次定点运算所能处理的比特数，一般等于内部寄存器大小
存储字长	一个存储单元所存数据的比特数，一般即主存宽度
指令字长	一个指令字所含比特数，一般是存储字长的整数倍
数据通路带宽	外部数据总线一次所能并行传输的信息的位数，可能与CPU内部寄存器大小不同
主存容量	表示为字数*字长(如512K*16位)，最大内存高度即可寻址数为2^(MAR)，内存宽度(字长)为MDR
运算速度：
  吞吐量		单位时间处理请求/指令的数量，主要取决于主存存取周期
  响应时间		用户发出请求到得到结果所需时间
  CPU时钟频率(主频)	主时钟频率(MHz)
  CPU时钟周期		=1/主频；通常为节拍脉冲/T周期，CPU最小时间单位
  CPI			平均执行一条指令所需时钟数
  CPU执行时间		=(程序指令条数*CPI)/主频；执行某个程序所需时间
  MIPS			=指令条数/(执行时间*10^6)=主频(MHz)/CPI；每秒执行多少百万条指令
  MFLOPS/GFLOPS/TFLOPS	=指令条数/(执行时间/10^i)；每秒执行多少百万/十亿/万亿次浮点运算

一.数据表示与运算
1.数制编码
数制转换
  二进制=>八/十六进制	3/4位分组查表
  任意进制=>十进制	码权积和
  十进制=>任意进制	整数除基取余逆写，小数乘基取整顺写
格雷码：加一减一都只翻转一个bit
BCD码：4位二进制表示十进制数码，6个冗余状态
  8421码	有权码(8421)，大于(1001)2即(9)10时需加6以进位
  余3码		无权码，=8432码+(0011)2
  2421码	有权码(2421)；大于等于5的数最高位为1，小于5的最高位为0
字符与字符串
  ASCII(7bit)
    0~31控制+32~126可打印+127DEL
    *字符'0'~'9'的低4位正好是二进制数字0~9(int = 0xF & char)
  汉字编码：GB2312-80(2B)/GB18030(1B/2B/4B)
    输入编码	[用于输入]
      区位码	一个汉字2B，每个字节用7bit
                字符排列为94*94矩阵，用4位10进制数索引(区号+位号)
      国标码=(区位码)16+2020H
    汉字内码	[用于内部处理]
      汉字内码=(国标码)16+8080H	//两个字节最高位设为1以区别ASCII
    汉字字形码	[用于输出]
	*区位-(+2020H)->国标-(+8080H)->内码	// 一共+A0A0H
  端序：主存字为多个B时
    大端(先高后低/顺序)    小端(先低后高/逆序)
      31-15-7-0  7-0         31-15-7-0  7-0
       B i g e   0x12         l a m S   0x78
       n d i a   0x34         d n e l   0x56
       n . \0    0x56         . n a i   0x34
                 0x78              \0   0x12
       *char*在32bit的主存；int在8bit的主存
校验码
  奇偶校验：检测出奇数个错误
  海明码
    纠错理论：L-1>=D+C(D>=C)
      *L为编码最小码距
       D为检测错误位数
       C为纠正错误位数
    校验不等式：n+k<=2^k-1
      *n为信息位位数
       k为校验位位数
  循环冗余校验CRC
    生成多项式+附加FCS段+模二除法/异或除

2.定点数
表示
  符号
    无符号数：全是数值位
    有符号数：最高位为符号位，其余为数值位
  定点
    定点小数(约定小数点在首位前)      X=x0.x1x2x3..xn	//x0为符号位
    定点整数(约定小数点在末位后)      X=x0x1x2x3..xn.	//x0为符号位
  原反补移
            (添符号位)       (负则数值取反+1)
      [X]真----------->[X]原-----------------[X]补
                        |                     |
                   (负则|数值取反)   (符号取反|数值取反+1)
                        |                     |
                       [X]反                [-X]补
    [X]原小=(x>0 && x || 1+|x|)
    [X]原整=(x>0 && x || 2^n+|x|)
    [X]补小=(x>0 && x || 2-|x|)
    [X]补整=(x>0 && x || 2^(n+1)-|x|)
    [X]模4补小=(x>0 && x || 4-|x|)	//双符号位00为正11为负
    [X]反小=(x>0 && x || 2-2^(-n)+x)
    [X]反整=(x>0 && x || 2^(n+1)-1+x)
    [X]移整=(2^(n-1)+x)
运算溢出
  一位符号：操作数符号相同，却与结果符号不同，则溢出
  双符号位：00正无溢出，01正溢出，10负溢出，11负无溢出
  一位符号+进位：符号位进位与最高位进位不同，则溢出
类型转换/截断扩展
  类型转换不改变比特表示，只改变位的解释方式
  截断高位，扩展符号位

3.浮点数
  略，都懂:)

4.算数逻辑单元ALU
一位全加器FA
  和=A^B^C		//C为进位输入
  进位=AB+(A^B)C
串行/并行加法
  决定什么时候进位

二.存储系统
1.概念
分类
  层次	主存(CPU可直接访问)/辅存/高速缓冲Cache(部分在CPU中)
  介质	磁表面(磁盘、磁带)/半导体(MOS型、双极型)/光
  存取	随机(RAM)/只读(ROM)/串行访问
  保存性	易失性/非易失性、破坏性读出/非破坏性读出
性能指标
  存储容量=存储字数*字长(1M*8bit)
  数据传输率=数据带宽/存储周期
    *存取周期Tm=存取时间Ta+恢复时间Tr
	 数据带宽Bm：单位b/s或B/s
  单位成本=总成本/总容量($/bit)
层次结构
  Register->L1 Cache->L2 Cache->(L3 Cache)->Memory->Disk

2.半导体随机存储器
基本结构
  存储矩阵		大量位存储阵列
  译码驱动		地址编号转选通信号
  读写电路		读出放大器+写入电路
  读写控制线	确定当前处于读/写模式
  片选线		确定被选芯片
  地址线		单向，芯片内地址选择
  数据线		双向，宽度等于数据位数
RAM存储器：易失
  SRAM	双稳态触发器(六管MOS)，非破坏性读出
  DRAM	栅极电容电荷，破坏性读出，地址线复用(即行/列分两次读出)
    *周期性刷新：电容上的电荷寿命只有1~2ms；刷新以行为单位、覆盖所有芯片
	  集中刷新	固定时间内刷新所有电容；刷新期间不可读写(死区)
	  分散刷新 嵌入工作周期：上半周期用于读写或维持，下半周期仅刷新该行；加长了存取周期
	  异步刷新	刷新间隔t=刷新周期(2ms)/行数，则每t时间间隔产生一个刷新请求
  读写周期
    读	ADDRin有效->~CS/RD有效->DATAout有效->~CS/RD无效->ADDRin无效->DATAout无效
	写	ADDRin有效->~CS/WR有效->DATAin有效->~CS/WR无效->DATAin无效->ADDRin无效
ROM存储器：非易失
  特点：结构简单，位密度比可读写存储高；非易失，可靠
  分类
    掩膜式MROM			生产时直接写入
	一次性可编程PROM	允许用户使用专用编程器写入一次
	可擦除可编程EPROM	写入次数有限且耗时，紫外线擦除UVEPROM/电擦除EEPROM
	闪速Flash			可快速擦除重写

3.主存与CPU连接
连接原理
  数据总线	传数据，数据传输率=位数*工作频率
  地址总线	片选+字选地址，可寻址范围=2^位数
  控制总线	控制信号，当前指出总线周期类型、确定输入输出完成的时间点
主存容量扩展
  位扩展	横向增加字长，多个芯片复用同一个地址(一般应与CPU中数据线等宽)
  字扩展	纵向增加字数，新增芯片需要新的地址；使用译码器进行芯片选择
数据选择
  片选	线选法(n根地址线=>n个芯片)；译码器片选法(n根地址线=>2^n个芯片)
  字选	地址线中地址码部分选出片内地址

4.双口RAM与多模块存储器
双口RAM
  同一个存储器有左右两个读写端口，允许同时读写不同地址、同时读取相同地址
  *使用~BUSY信号作为一侧端口的写锁
多模块存储器
  单体多字(按多字编址)
    存储器只有一个存储体，每个地址存m个字，总线宽度也为m个字(单次并行读出m个字)
	缺点：指令和数据不是连续存放的时候效果不明显
  多体并行(体=一个扩展为指定长宽的芯片组)
    高位交叉/高位交叉	地址高位表示体编号，同一个体内地址是连续的；仍然是顺序存储器，没有改善
	低位交叉/交叉方式	地址低位表示体编号，同一个体内地址是公差为总体数n的等差数列；尽量错开了恢复周期的等待问题
	  *访问连续地址时每1/n个存取周期启动一个新体能形成流水线，稳定时每个存取周期能读出n个字

5.高速缓冲
局部性原理
  指令	绝大多指令顺序执行，跳转很少
  数据	大量数据都集中在程序的线性只读段里
Cache原理
  块：主存和Cache都被切分为若干字节大小的块，不命中时替换以块为单位(读写的单位仍然以数据类型为准)
  读工作流
    1.地址转换ADDRm=>ADDRc
	2.若命中，则返回Cache[ADDRc]
	3.否则，更新Cache[ADDRc]=Memory[ADDRm]，返回Cache[ADDRc]
映射方式
  全相联	主存块可以映射任何一个Cache块
	用法	像堆，Cache满时才会淘汰
	虚地址	|主存块号|块内偏移|
      *相联存储器：一种可以按值和按地址随机访问的Cache
  直接映射	主存块唯一映射一个Cache块
    用法	像数组，块号冲突时直接淘汰
	虚地址	|主存块号|Cache页号|块内偏移|
  组相联	主存块唯一映射一个Cache组，一定策略映射一个组内块
    用法	像多维度数组，块号冲突且组满时以一定策略淘汰组内一个现有成员
	虚地址	|主存块号|组号|块内偏移|
块替换算法
  随机RAND			简单即玄学
  先进先出FIFO		队列时管理，淘汰队尾的
  近期最少使用LRU	行计数器记录寿命，每次访问所有行寿命+1，若命中则命中行寿命清零，淘汰最老的
  最不经常使用LFU	行计数器记录访问次数，淘汰访问最少的
Cache写策略
  直写Write-through	非写分配法；Cache写命中时，必须同时写回主存
  写回Write-back	写分配法(写Memory的同时调入Cache)；暂且只修改Cache内容，块换出时才写主存；Cache块必须有一个脏位(dirty bit)

6.虚拟存储
目的：将主存和辅存的地址空间统一编址，扩充可见主存
段式虚拟存储器
  段	代码段(.text)/数据段(.data/.rodata)
  段表	(段号, 段基址)
  工作流
    1.虚地址分解为(段号, 段内地址)
    2.段表中用段号查段基址BS，组成实地址(BS+段内地址)
  缺点：外部碎片
页式虚拟存储器
  页	实页(主存页)/虚页(虚存页)，页大小一致
  页表	(有效位, 虚页号, 实页号)
  工作流
    1.虚地址分解为(虚页号, 页内偏移)
    2.页表中用虚页号查实页号，若有效则组成实地址(实页号, 页内偏移)
    3.若查不到则触发缺页中断IO调入主存页，更新页表
  缺点：内部碎片，两次访存；分页机制对于程序而言没有语义，处理、保护、共享等都不好操作
段页式虚拟存储器
  虚地址::=(段号: 段内页号, 页内偏移)
  工作流
    1.段号--(段表)-->页表基址
    2.页表基址+段内页号--(页表)-->页地址
    3.页地址+页内偏移-->实地址
  实际使用
    1.每个程序分配一个段表存多个段(多个从0开始的地址空间)
    2.每个段分配一个页表存多个页
快表TLB/慢表Page
  用Cache缓存页表的一部分作为快表TLB，TBL命中则Page必然命中

三.指令系统
1.指令格式
基本格式
  *指令=Op|Addr
  零址	op		无操作数(HLT/NOP/CLI)；隐含栈顶(用于堆栈计算机)
  一址	op|a1		单操作数(NEG/INC)；隐含ACC
  双址	op|a1|a2	双操作数(ADD/LSHR)，结果存于目的操作数地址a1
  三址	op|a1|a2|b	双操作数，结果存于地址b
  四址	op|a1|a2|b|next	双操作数，执行后转移JMP next
定/变长操作码
  定长操作码指令格式
    指令字的最高位分配固定的n位为操作码op(机器字长32位以上时常用)
    (优)简化硬件设计，提高译码识别
  扩展操作码指令格式
    全部操作码位数不固定，分散到指令字的不同位置上
    指令从形式上分级，同一级指令有相同的前缀(形似与IP编址)

2.指令寻址方式
寻址
  指令寻址
    顺序寻址		; PC=PC+1
    跳跃寻址	JMP next; PC=next
  数据寻址
      |操作码op|寻址特征|形式地址addr|
    隐含寻址		隐含ACC
    立即数寻址		补码形式的操作数本身(受限于addr长度)，不访问主存
    直接寻址		访问主存Mem[addr]
    间接寻址		访问主存Mem[Mem[addr]]，n次间接寻址访问n+1次主存
    寄存器寻址		访问寄存器Ri
    寄存器间接寻址	访问寄存器和主存Mem[Ri]
    相对寻址		访问主存Mem[PC+addr]，即从程序计数器PC开始偏移addr
    基址寻址		访问主存Mem[BR+addr]，即从基址寄存器BR偏移addr
    变址寻址		访问主存Mem[IX/Ri+addr]，即从变址寄存器IX/通用寄存器Ri偏移addr
    堆栈寻址		访问Mem[SP]，SP为栈顶指针
      硬堆栈	一个寄存器组，通常小贵
      软堆栈	从主存划分出一块地址

3.CISC与RISC
复杂指令系统CISC(x86)
  1.指令系统庞大复杂，数目200条以上，长度不固定，格式种类多，寻址方式多
  2.可以多种方式访问存储(R/M-R, R-M)
  3.各种指令使用频度差异大，执行时间差异大(多数指令需要多个时钟周期)
  4.控制器多采用微程序控制
  5.难以用优化编译生成高效的本地代码
精简指令系统RISC(ARM/MIPS)
  1.保留高频指令，复杂指令分解为简单指令的组合；指令长度固定，数目少，格式种类少，寻址方式少
  2.只有LOAD/STORE指令可以访问存储，其余指令都寄存器间进行
  3.CPU中通用寄存器多
  4.强制采用流水线技术，使得大部分指令在一个时钟周期内完成
  5.组合逻辑控制，以硬布线控制为主，少用微程序控制
  6.特别重视程序编译的优化，保证效率和实时性

四.中央处理器CPU
1.CPU功能结构
CPU功能
  指令控制	完成取指、分析、执行的操作
  操作控制	控制每个机器周期的操作流程
  时间控制	时序保证
  数据加工	算数逻辑运算
  中断处理	处理异常和特殊情况
CPU基本结构
  运算器
    算数逻辑单元ALU	算数/逻辑运算
    暂存寄存器		暂存从主存读来的数据
    累加器ACC		暂存ALU的结果
    通用寄存器组	AX/BX/CX/DX/SP等等
    程序状态字PSW	OF/SF/ZF/CF等
    移位器		对结果进行位移
    计数器CT		控制乘除运算的操作步数
  控制器
    程序计数器PC	存放下一条要执行的指令在主存中的地址
    指令寄存器IR	存放当前正在执行的指令
    指令译码器		对IR的操作码字段译码，向控制器提供特定的操作信号
    存储器地址寄存器	存放所要访问的主存地址
    存储器数据寄存器	存放将要写入主存或刚从主存读出的数据
    时序系统		时序保证，统一时钟CLOCK分频得到
    微操作信号发生器	根据IR、PSW即时序信号产生控制整个计算机系统所需的控制信号(有组合逻辑型/存储逻辑型两种)

2.指令执行过程
指令周期
  概述
    一个指令周期=多个机器周期；一个机器周期=多个时钟周期(T周期/节拍)
    非完全周期：JMP指令不访问主存，只有取指周期和执行周期
    CPU内置机器周期标志触发器：FE取指、IND间址、EX执行、INT中断
  工作数据流
    取指周期
      1.PC->MAR->地址总线->主存
      2.CU发出读命令->控制总线->主存
      3.主存->数据总线->MDR->IR
      4.CU发出控制信号->PC=PC+1
    间址周期
      1.Ad(IR)/MDR->MAR->地址总线->主存
      2.CU发出读命令->控制总线->主存
      3.主存->数据总线->MDR
    执行周期
      无固定数据流
    中断周期
      1.CU发出控制信号->SP=SP-1，SP->MAR->地址总线->主存
      2.CU发出写命令->控制总线->主存
      3.PC->MDR->数据总线->主存(保存断点PC压栈)
      4.CU发出控制信号->PC=ISR(中断处理函数入口地址)
指令执行方案
  单指令周期	指令串行；所有指令都用相同的时间执行
  多指令周期	指令串行；不同指令按需分配时钟周期
  流水线方案	指令并行；重叠若干个指令流水线，每个时钟周期启动一条指令，争取每个时钟周期完成一条指令

3.数据通路
基本结构
  CPU内部总线	所有寄存器的输入输出端连入一条或多条公共通路；结构简单冲突多
  专用数据通路	根据实际需要的数据流向设计各自的连接线路；硬件量大
功能
  寄存器间数据传输	[CPU内部总线]
    PC->Bus	; PCout有效，PC送至总线
    Bus->MAR	; MARin有效，总线送入MAR
  主存-CPU数据传输	[CPU内部总线]
    PC->Bus->MAR	; PCout和MARin有效，PC地址送入MAR
    1->R		; CU发出读命令
    Mem[MAR]->MDR	; MDRin有效
    MDR->Bus->IR	; MDRout和IRin有效，指令字读入IR
  算数/逻辑运算
    Ad(IR)->Bus->MAR	; MDRout和MARin有效
    1->R		; CU发出读指令
    Mem->Bus'->MDR	; 操作数经过系统总线送入MDR
    MDR->Bus->Y		; MDRout和Yin有效，操作数送入暂存寄存器Y
    (ACC)+(Y)->Z	; CU发出加指令，ALU执行ACC+Y，结果暂存于暂存寄存器Z
    Z->(ACC)		; Zout和ACCin有效，结果写回ACC

4.控制器
控制器CU功能结构
  1.从主存取出一条指令，指出下一条指令地址
  2.对指令进行译码测试，产生响应的控制信号以启动相应动作
  3.控制CPU、主存、输入输出设备间的数据流动方向
硬布线控制
  控制单元图
          IR(op)->操作译码器 => |        |
	    CLK->节拍发生器  => |   CU   | => 输出
	       标志FLAGS     => | 控制器 |
	    总线控制(中断等) => |        |
	*操作码			op经过译码器变成若干微指令
	 时钟节拍		时序保证
	 FLAGS反馈		有些微指令依赖当前CPU的状态信息
  时序系统及微操作
    取指周期
	  PC->MAR			; 准备取地址为PC的指令
	  1->R			; 读命令
	  Mem[MAR]->MDR	; 取得的指令送入MDR
	  MDR->IR			; MDR转移到IR作为当前执行中指令
	  IR(op)->CU		; op部分送给CU译码
	  PC=PC+1			; PC指向下一条指令
	间址周期
	  IR(addr)->MAR	; 若有操作数需要间接寻址
	  1->R
	  Mem[MAR]->MDR
	执行周期
	  非访存指令
	    CLA	; 清零ACC
		COM	; 取反ACC
		SHR	; 算术右移ACC
		CSL	; 循环左移ACC
		STP	; 停机
	  访存指令
	    ADD X				; 加法，IR(addr)->MAR
		1->R
		Mem[MAR]->MDR
		(ACC)+(MDR)->ACC
		STA X				; 存数，IR(addr)->MAR
		1->W
		ACC->MDR
		MDR->Mem[MAR]
		LDA->X				; 取数，IR(addr)->MAR
		1->R
		Mem[MAR]->MDR
		MDR->ACC			; 后接其他操作
	  转移指令
	    JMP X				; 无条件转移，IR(addr)->PC
		BAN X				; 负条件转移，A0*IR(addr)+~A0*PC->PC
  CPU控制方式
    同步控制	使用统一时钟，以最长的微操作周期作为一个基准时间间隔，统一其他微操作的周期
	异步控制	各部件按照固有的速度工作，通信时靠应答方式建立联络
	联合控制	混合使用两者
微程序控制器
  基本概念
    微命令/微操作	机器指令=若干微操作，一个微命令唯一对应一个微操作
	微指令/微周期	微指令=若干微命令，(操作控制/微操作码，顺序控制/微地址码)=(op1, op2, ..., opn; next)
	控制存储器CM	CPU内部用ROM存放微程序
  组成及工作过程
    IR(op)->微地址形成器->顺序逻辑(+CLK/FLAGS)->CMAR->地址译码->控制存储器CM->CMDR(微操作列表ops; 下地址next)->到CPU和系统总线的控制信号
	  微地址形成器		形成初始微指令地址和下地址
	  微地址寄存器CMAR	存储对应op的微程序地址，用于查CM表以取得微指令
	  微指令寄存器CMDR/μIR	存储目前需要执行的微指令
	  *一个机器指令=一个微程序，但取指、间址、中断等操作一般抽象成单独而公用的微程序
  微指令编码
    直接编码		(op1, op2, ..., opn; next), opi->控制信号
	字段直接编码	(seg1, seg2, ..., segn; next)，segi->译码->控制信号
	字段间接编码	segi中的一些微命令依赖segj的某些微命令来解释，更加复杂
  微指令地址形成
    1.微指令的下地址字段直接指出/断定方式
	2.根据机器指令的操作码形成
	    计数器增量法/自增1
	    根据标志FLAGS决定分支转移地址
	    网络测试形成
	    硬件直接产生微程序入口
  微指令格式
    水平型	(op1, op2, ..., opn; 判断测试test, 后继地址next)；微操作可并行，指令长程序短，效率高
	垂直型	(op, 目的地址Rd, 源地址Rs)；类机器指令，微指令短小整齐，效率低
	混合型	基于垂直型，适当并行
  微程序控制单元设计
	  PC->MAR, 1->R			; 取指周期
	  CMDR(addr)->CMAR
	  Mem[MAR]->MDR, PC+1->PC
	  CMDR(addr)->CMAR
	  MDR->IR
	  IR(op)->微地址形成器->CMAR

5.流水线
基本概念
  一条指令细分成n个不相干涉的阶段(如取址/分析/执行)，开设n条(n-1)段重叠而并行的流水线即可同时执行多条指令
分类
  部件功能/处理机/处理机间级别	拆分运算/拆分指令/宏共享协作
  单功能/多功能	固定完成一个功能/不同时间可完成多个功能
  动态/静态		同一时间段内，流水线各段只能按同一种功能的连接方式工作/不同的段可以进行不同的运算
  线性/非线性	各个功能段之间是否存在负反馈
影响流水线的因素
  结构/资源冲突		指令间资源争用；分割指令存储器和数据存储器，推迟后续的访存指令
  数据/数据冲突		计算所使用的数据有依赖关系；调整计算顺序
  控制/控制冲突		转移指令造成断流；分支预测
性能指标
  吞吐率TP=n/Tk=n/((k+n-1)*Δt)		单位时间内完成任务个数(极限值为1/Δt)
  加速比=T0/Tk=k*n/(k+n-1)		串行耗时与流水线耗时的比值(极限值为k)
  效率=T0/(k*Tk)			串行设备占用度与流水线设备占用度的比值(极限值为1)
    *k为流水线段数(假设等长)
	 n为任务数/指令条数
	 Δt为时钟周期
超标量流水线
  超标量流水线	同时启动多个流水线(如GPU)
  超流水线	流水线启动间隔缩短至每个时钟周期

五.总线
1.概述
基本概念
  定义：一组能为多个部件分时共享的公共信息传输线路
  特点：分时(同一时刻只能有一个发送)共享(多个设备可同时接收)
  设备：主设备(获得总线控制权的设备)从设备(被主设备访问的设备，只能响应主设备的总线命令)
  特性：机械(尺寸/形状)电气(传输方向/电平范围)功能(每根传输线的意义)时间(信号时序)
  猝发传输：一个总线周期内传输存储地址连续的多个数据字
分类
  片内总线：CPU内部的寄存器-寄存器/ALU-寄存器
  系统总线：CPU-主存-I/O接口
    数据总线	双向；位数与机器字长、存储字长相关
    地址总线	单向；位数与主存地址空间大小相关
    控制总线	双向；CPU送出控制信号，主存/外设送回反馈信号
  通信总线：即外部总线，计算机系统间远程通信测试；同步/异步+串行/并行
总线结构
  单总线	总线=CPU+主存+I/O设备；简单廉价易接入新设备，带宽低负载重不支持并发
  双总线	主存总线=CPU+主存+通道适配器，IO总线=通道适配器+I/O设备；分离低速设备，需额外增加通道设备
  三总线	主存总线=CPU+主存，IO总线=CPU+I/O设备，DMA总线=主存+I/O设备；提高IO设备性能，效率低
性能指标
  时钟周期	=机器统一的时钟周期
  总线/传输周期	=(申请+寻址+传输+结束)四个阶段耗时，等于若干倍时钟周期
  工作频率	=1/总线周期，指一秒内传输数据的次数
  总线宽度/位宽	总线上同时能传输的数据位数
  总线带宽	=总线宽度(B)*总线频率(MHz)
  总线复用	一种信号线在不同的时间传输不同的信息，可以用较少的线传输更多信息?
  信号线数	=地址+数据+控制总的线数

2.仲裁
集中仲裁：总线控制逻辑集中在一个设备(如CPU)中以特定的算法仲裁
  链式查询
    0.所有设备共享一根总线申请线和一根总线响应线
    1.总线控制器在申请线上收到请求信号BR后，沿响应线发出总线允许信号BG
    2.BG信号依次传递经过若干个设备，直到被申请者拦截
    优点：天然的优先级机制(接近控制器的设备优先)，结构简单易扩展控制线少(=2)
    缺点：电路故障敏感，优先级不可变更，低优先级设备可能长期无法使用总线
  计数器定时
    0.所有设备共享一根总线申请线和一组设备地址线
    1.总线控制器在申请线上收到请求信号BR后，计数器开始计时并将值沿设备地址线发送给各设备
    2.当地址线上的计数值与申请者地址一致时设备取得总线控制权，计数器停止
    优点：优先级可临时调整(计数器初始值可以自定义)
    缺点：控制线较多(=[lbn]+2)
  独立请求
   0.每个设备独有一对总线请求线和总线允许线
   1.设备通过申请线发送请求BR，请求在总线控制器中排队
   2.设备通过响应线收到允许BG后获得总线控制权
   优点：优先级调整灵活，信号直达不中转
   缺点：控制线众多(=2n+1)
分布仲裁
  0.每个设备有自己的仲裁号和仲裁器，所有设备共享仲裁总线
  1.设备把自己的仲裁号发到仲裁总线上?
  2.仲裁器收到这个仲裁号并对比自己，若比自己优先级高则撤销自己
  3.最终获胜者的仲裁号保留在仲裁总线上

3.操作与定时
总线阶段
  申请分配	需要总线的主设备提出申请，总线裁决机构决定下一传输周期的授权者
  寻址		取得使用权的主模块通过总线发出从设备地址及相关命令，启动从设备
  传输		设备间数据交换，可单向/双向数据传输
  结束		从总线上撤出主设备的相关信息，让出使用权
同步定时
  0.系统使用一个统一的时钟信号协调收发双方
  1.时钟产生等时间隔，每个间隔为一个总线周期，双方可以传输一次数据
  优点：传输速度快，总线控制逻辑简单
  缺点：强制同步，不能及时进行有效性检验
异步定时
  0.没有固定时间间隔，依靠双方握手信号
  1.主设备提出请求信号，从设备发出回答信号
  优点：总线周期长度可变，适合速度不同的设备间调和
  缺点：速度慢，控制逻辑较复杂
  分类
    不互锁：主设备请求后不等待回答，一段时间后自动撤销请求信号；从设备收到请求后发出回答，一段时间后自动撤销回答信号
    半互锁：主设备请求后等待到回答后才撤销请求信号；从设备自动撤销回答信号
    全互锁：主设备请求后等待到回答后才撤销请求信号；从设备回答后等待到请求撤销后才撤销回答信号

4.标准
ISA	IBM的AT机
EISA	扩展的ISA，配合32位CPU
VESA	32位，针对多媒体高速传输活动图像
PCI	32/64位，针对高度集成的外围部件、扩展板；支持即插即用，与处理器时钟无关，可桥接实现多级化
PCI-E	串行；扩展PCI，即将统一总线世界的标准
AGP	连接主存和图形存储器
RS-232C	连接串行二进制交换的数据终端设备DTE和数据通信设备DCE
USB	串行；即插即用，热插拔
PAMCIA	用于笔记本小型扩展；即插即用
IDE/ATA	并行；磁盘/光盘驱动器接口
SCSI	并行；连接计算机与智能设备(硬盘/光驱/软驱/打印机)
SATA	串行；硬盘接口规范

六.输入输出系统
1.基本概念
输入输出系统
  外部设备	输入输出设备+通过输入输出接口才能访问的外存储设备
  接口		协调主机与外设之间数据传输中的速度匹配、电平和格式转换
  输入设备	向计算机系统输入命令和数据等信息
  输出设备	将计算机系统中的信息输出到计算机外部以显示、交换
  外存设备	除主存以及CPU缓存以外的(主机不直连)的存储器
  I/O软件	驱动程序+用户程序+管理程序+补丁，使用I/O指令和通道指令实现CPU和I/O设备的信息交换
  I/O硬件	外部设备+设备控制器+接口+I/O总线
I/O控制方式
  程序查询	由CPU通过程序不断查询I/O是否就绪
  程序中断	I/O设备就绪后向CPU发出中断请求后予以响应
  DMA		主存和I/O设备间有直接的数据通路，无需中断CPU即可相互交换数据
  通道		每个通道挂接若干设备，主机执行I/O命令时启动有关通道，通道将执行通道程序完成I/O操作

2.外部设备
输入设备
  键盘		矩阵排列的按键，控制器检测被按下按键的地址，编码(如ASCII)之后传给主机
  鼠标		机械式/光电式；传感器检测运动方向和距离
输出设备
  显示器
    基本参数
      屏幕大小	对角线长度(一般12~29英寸)
      分辨率	所能表示的像素个数(800x600/1024x768/1280x1024)
      灰度级	黑白暗亮/色彩明度差异(8位即256级/16位)
      刷新	光点只能保持极短时间之后就会消失，消失前必须再扫描显示一遍
      刷新频率	单位时间内刷新次数(大于30Hz就不会明显闪烁，一般60~120Hz)
      显存VRAM	又刷新存储器；存储每一帧需要被刷至屏幕上的图像数据
        VRAM容量=分辨率*灰度级位数
        VRAM带宽=分辨率*灰度级位数*帧频(即刷新频率)
    阴极射线管显示器CRT
      =电子枪+偏转线圈+荫罩+高压石墨电极+荧光粉涂层
      字符显示器：点阵为基础，显存里用矩阵表示字符的01点阵，控制电子束在屏幕上的有无
      图形显示器：显存里存显示文件(一组坐标点+绘图命令)，交给矢量产生器产生模拟电压来控制电子束的移动
    液晶显示器LCD
      光电效应；图像以电压信号的形式控制薄膜晶体管，间接控制液晶分子的光学特性
    发光二极管显示器LED
      控制若干个发光二极管
  打印机
    针式打印机
      主机命令控制纵向送纸与打印头横向移动，驱动打印头间歇性冲击色带
      优：擅长多层复写打印，原理简单造价低廉；缺：分辨率和打印速度低
    喷墨式打印机
      带电喷墨经过电极偏转落于纸上；彩色喷墨打印机基于三基色原理，按一定比例混合三种颜色的墨水
      优：噪声小，高质量彩色打印，通常比针式打印机快；缺：防水性差，有时需专用打印纸
    激光打印机
      计算机输出二进制信息，经过调制后的激光束扫描，在感光鼓(硒鼓)上形成潜像，经过显影、转印、定影即得
      优：质量高速度快噪声小；缺：耗材多价格贵，不能复写打印多份，纸张要求高
外存设备
  *磁表面存储器：磁性材料均匀涂在金属铝或塑料表面(如磁盘/磁带/磁鼓)；容量大可重复读写，长期保存不丢失，非破坏性读出
  磁盘
    存储区域
      硬盘存储=h个记录面(磁头数)*c个磁道(柱面数)*s个扇区(块/最小存取单位)
      硬盘物件=磁盘驱动器(磁头组件+盘片组件)+磁盘控制器(磁盘与主机的接口，如IDE/SCSI/SATA)
    磁记录原理
      原理：磁头和记录介质有相对运动时，触发电磁转换操作完成读写
      编码：二进制串变换成磁介质的磁化翻转状态序列
      记录：通常用调频制(FM)或改进型调频制(MFM)记录方式
    性能指标
      容量		非格式化容量(磁记录表面可以利用的磁化单元总数)；格式化容量(按照某种特定记录格式所能存储信息的总量)
      记录密度		面密度=位密度(单位长度磁道可记录的比特串长)*道密度(沿磁盘半径方向单位长度上的磁道数量)
      平均存取时间	=寻道时间(找到磁道)+旋转延迟时间(找到扇区)+传输时间
      数据传输率	Dr=rN，单位时间向主机传输的字节数，r为磁盘转数(转/s)，N为每条磁道的容量(Byte)
    磁盘地址：		|驱动器号|柱面(磁道)号|盘面号|扇区号|
    工作过程：		寻找/读盘/写盘；串行操作，不同时读和写，也不同时读/写多个扇区
  磁盘阵列
    RAID0	纯分流；无冗余无校验
    RAID1	镜像
    RAID2	海明码纠错
    RAID3	位交叉奇偶校验
    RAID4	块交叉奇偶校验
    RAID5	无独立校验的奇偶校验
  光盘
    类型
      CD-ROM	只读
      CD-R	可写一次
      CD-RW	可反复读写
      DVD-ROM/R/RW
  固态硬盘	使用Flash Memory作记录载体

3.I/O接口
功能
  主机和外设通信；地址译码设备选择；数据缓冲；信号格式转换；传送控制命令/状态信息
结构
    |C|<===数据线====>|数据缓冲寄存器DBR    设备选择电路|<=数据线=>|外|
    |P|----地址线---->|      (I/O接口控制逻辑电路)      |---命令-->|  |
    |U|--命令/状态线->|设备状态标记    命令寄存器/译码器|<--状态---|设|
  CPU实际写入数据到接口的缓冲区DBR，给出地址，接口负责转送至外设
  内部接口：与系统总线(CPU+内存)相连，只能并行传输
  外部接口：通过接口线缆连接外设，可以串/并转换
类型
  串行/并行；程序查询/中断/DMA；可编程/不可编程
端口及编址
  统一编址/存储器映射
    把I/O端口当做存储器的单元进行地址分配；CPU不需要专用的I/O指令(一般的MOV即可访问)
    优(无需特设指令，端口有较大编址空间)；缺(缩减了主存地址空间，直接IO操作执行速度慢)
  独立编址/IO映射
    IO端口地址与存储器地址无关，CPU需要有单独的指令(如IN/OUT)表示访问外设
    优(指令分离，程序逻辑清晰)；缺(特设指令少功能有限，增加指令系统设计和控制的复杂性)

4.I/O方式
程序查询
  1.CPU初始化程序，预置传送参数(DS/CX)
  2.向I/O接口发出命令字启动I/O设备
  3.CPU不断从接口读取状态信息，直到设备就绪
  4.传送一次数据
  5.若CX!=0，修改DI++和CX--(即准备下一个数据)；跳回第3步
程序中断
  中断的作用
    1.实现CPU与I/O并行
    2.处理硬件故障和软件错误
    3.实现人机交互，使得用户可干预
    4.多道程序分时操作的切换
    5.实时处理的快速响应
    6.用户程序和管态程序(操作系统)之间的切换，即软中断
    7.多处理器系统中处理期间的信息交流和任务切换
  中断工作流
    中断请求
      外中断		来自于CPU和主存以外，包括IO中断、计时器中断等
      内中断		为CPU和主存以内的硬件故障或程序错误，如地址非法、校验错、页面失效、存取访问控制错、算数操作溢出、数据格式非法、除零、指令非法、用户程序执行特权指令、时间片结束心跳、用户-核心态切换
      硬件中断		属于外中断，通过外部硬件产生
      软件中断		属于内中断，通过指令(如INT)产生的可编程中断
      非屏蔽中断	属于外中断，由不可屏蔽中断请求NMI控制，不受中断控制位IF影响，关中断也会响应
      可屏蔽中断	属于外中断，由中断请求标记触发器INTR控制，可以通过IF=0无效化
    中断判优
      硬件实现(硬件排队器)；软件实现(优先级查询程序)
      一般地：硬件故障>软件中断；非屏蔽>可屏蔽；DMA中断>设备中断；高速设备>低速设备；输入设备>输出设备；实时设备>普通设备
    CPU响应中断的条件
      1.收到中断源的中断请求
      2.CPU允许中断且打开了中断
      3.当前这条指令已执行完毕，没有更紧迫的任务
    中断隐指令
      !!纯硬件操作：CPU响应中断后，为了转向中断服务程序ISR，所需要做的操作
        1.关中断(如果不允许嵌套)
        2.保存程序断点，即当前PC(直接压栈?)
        3根据约定的中断向量地址表，设置PC=ISR入口
    中断向量：      每个中断都有约定的ISR入口地址，主存中需要有一张表存各ISR的地址
    中断处理过程
      硬件完成：IF=0->保存PC->PC=ISR寻址
      ISR完成：保存现场(PUSH)->IF=1->执行中断服务->IF=0->恢复现场(POP)->IF=1->IRET
  多重中断条件
    1.中断服务主体开始之前开中断
    2.优先级高中断的可抢断优先级低的中断
      每个中断需要一个屏蔽字(如四个中断ABCD，其中B的屏蔽字为0011，则B优先级高于CD低于A)
DMA
  特点
    1.主存的中心化，使得主存可直接被CPU和外设访问，CPU和IO并行
    2.数据块传送时，主存地址的确定、传送数据计数都有独立的硬件电路完成
    3.主存中要开辟专用缓冲区，以及供给和接收外设数据
    4.DMA传输开始前要通过预处理程序，结束后以中断的形式后处理
  工作流
    1.DMA控制器接受外设发出的DMA请求，向CPU发出总线申请
    2.CPU释放出总线控制权，进入DMA操作周期
    3.控制器确定传送数据的主存单元地址及长度，规定传送方向
    4.控制器发出读写信号，自动修改地址计数和长度计数，执行数据传输
    5.(释放总线)，向CPU中断报告完成
  控制器组成
    主存地址计数器	存放要交换数据的主存地址
    传送长度计数器	存放要传送的数据长度，计数器溢出时即传送完毕，自动发出中断请求
    数据缓冲寄存器	暂存每次要传送的数据
    DMA请求触发器	每当IO设备准备好数据后给出一个控制信号，使得DMA请求触发器置位
    控制/状态逻辑	时序逻辑控制电路，指定传送方向、修改传送参数，协调同步DMA请求信号和CPU响应信号
    中断机构		DMA传输故障或正常结束时以中断的形式通知CPU
  传送方式
    停止CPU访问主存	DMA获取总线后，CPU基本保持僵滞状态
    DMA/CPU交替访问	(适用于CPU工作周期比主存存取周期长)一个CPU工作周期中等于主存存取周期的部分正常访问主存，剩下的时间划分给DMA访问主存
    周期挪用		DMA优先挪用几个存取周期；但若CPU正在访问主存，则等待其结束后让渡总线
  传送过程
    预处理
      1.CPU执行几条I/O指令测试设备状态，设置DMA控制器的计数器初值、传输方向、设备使能
      2.CPU转回执行原来的主程序；I/O设备准备好数据后向DMA控制器发出DMA请求，控制器向CPU发出总线请求(两个请求统称DMA请求)
      3.CPU让渡总线控制权
    数据传送：可以以字节/块为单位，传输循环由DMA控制器的硬件电路完成
    后处理
      1.DMA控制器向CPU发出中断请求
      2.ISR作数据校验(出错则进入诊断程序)，决定是否用DMA传输其他块
  DMA与中断对比
    1.中断是程序切换，需要保护/恢复现场；DMA除了预/后处理都不占用CPU
	2.对中断请求的响应发生在每条指令执行完毕后；对DMA请求的响应可以发生在每个机器周期末端(取指/间址/执行周期末端)，只要CPU不占总线就可被响应
    3.中断传输过程需要CPU干预，DMA不需要
    4.DMA请求优先级高于中断请求
    5.中断可处理多种情况，DMA仅能作数据传输
    6.中断传输靠程序指令控制传送；DMA靠硬件逻辑控制
